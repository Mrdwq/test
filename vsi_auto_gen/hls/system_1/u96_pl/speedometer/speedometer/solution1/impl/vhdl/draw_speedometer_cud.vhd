-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity draw_speedometer_cud_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 37
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of draw_speedometer_cud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0011111111110000000000000000000000000000000000000000000000000000", 
    1 => "0011111111101111100000111000101110001100100000001100111001100111", 
    2 => "0011111111101110000100011111011001000010010100010101110100111010", 
    3 => "0011111111101011101101100111101011101000010101111011000001111111", 
    4 => "0011111111101000100000110110111110100010110011100001010001010110", 
    5 => "0011111111100100100100011011011101010010001110110011000000001000", 
    6 => "0011111111100000000000000000000000000000000000000000000000000000", 
    7 => "0011111111010101111000111010100001110100100010000111110100001111", 
    8 => "0011111111000110001110100001101001111110000001111010010000101110", 
    9 => "0000000000000000000000000000000000000000000000000000000000000000", 
    10 => "1011111111000110001110100001101001111110000001111010010000101110", 
    11 => "1011111111010101111000111010100001110100100010000111110100001111", 
    12 => "1011111111100000000000000000000000000000000000000000000000000000", 
    13 => "1011111111100100100100011011011101010010001110110011000000001000", 
    14 => "1011111111101000100000110110111110100010110011100001010001010110", 
    15 => "1011111111101011101101100111101011101000010101111011000001111111", 
    16 => "1011111111101110000100011111011001000010010100010101110100111010", 
    17 => "1011111111101111100000111000101110001100100000001100111001100111", 
    18 => "1011111111110000000000000000000000000000000000000000000000000000", 
    19 => "1011111111101111100000111000101110001100100000001100111001100111", 
    20 => "1011111111101110000100011111011001000010010100010101110100111010", 
    21 => "1011111111101011101101100111101011101000010101111011000001111111", 
    22 => "1011111111101000100000110110111110100010110011100001010001010110", 
    23 => "1011111111100100100100011011011101010010001110110011000000001000", 
    24 => "1011111111100000000000000000000000000000000000000000000000000000", 
    25 => "1011111111010101111000111010100001110100100010000111110100001111", 
    26 => "1011111111000110001110100001101001111110000001111010010000101110", 
    27 => "1000000000000000000000000000000000000000000000000000000000000000", 
    28 => "0011111111000110001110100001101001111110000001111010010000101110", 
    29 => "0011111111010101111000111010100001110100100010000111110100001111", 
    30 => "0011111111100000000000000000000000000000000000000000000000000000", 
    31 => "0011111111100100100100011011011101010010001110110011000000001000", 
    32 => "0011111111101000100000110110111110100010110011100001010001010110", 
    33 => "0011111111101011101101100111101011101000010101111011000001111111", 
    34 => "0011111111101110000100011111011001000010010100010101110100111010", 
    35 => "0011111111101111100000111000101110001100100000001100111001100111", 
    36 => "0011111111110000000000000000000000000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity draw_speedometer_cud is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 37;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of draw_speedometer_cud is
    component draw_speedometer_cud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    draw_speedometer_cud_rom_U :  component draw_speedometer_cud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


