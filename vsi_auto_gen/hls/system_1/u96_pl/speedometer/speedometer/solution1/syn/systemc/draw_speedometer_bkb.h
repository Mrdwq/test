// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __draw_speedometer_bkb_H__
#define __draw_speedometer_bkb_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct draw_speedometer_bkb_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 64;
  static const unsigned AddressRange = 37;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(draw_speedometer_bkb_ram) {
        ram[0] = "0b0000000000000000000000000000000000000000000000000000000000000000";
        ram[1] = "0b0011111111000110001110100001101001111110000001111010010000101110";
        ram[2] = "0b0011111111010101111000111010100001110100100010000111110100001111";
        ram[3] = "0b0011111111100000000000000000000000000000000000000000000000000000";
        ram[4] = "0b0011111111100100100100011011011101010010001110110011000000001000";
        ram[5] = "0b0011111111101000100000110110111110100010110011100001010001010110";
        ram[6] = "0b0011111111101011101101100111101011101000010101111011000001111111";
        ram[7] = "0b0011111111101110000100011111011001000010010100010101110100111010";
        ram[8] = "0b0011111111101111100000111000101110001100100000001100111001100111";
        ram[9] = "0b0011111111110000000000000000000000000000000000000000000000000000";
        ram[10] = "0b0011111111101111100000111000101110001100100000001100111001100111";
        ram[11] = "0b0011111111101110000100011111011001000010010100010101110100111010";
        ram[12] = "0b0011111111101011101101100111101011101000010101111011000001111111";
        ram[13] = "0b0011111111101000100000110110111110100010110011100001010001010110";
        ram[14] = "0b0011111111100100100100011011011101010010001110110011000000001000";
        ram[15] = "0b0011111111100000000000000000000000000000000000000000000000000000";
        ram[16] = "0b0011111111010101111000111010100001110100100010000111110100001111";
        ram[17] = "0b0011111111000110001110100001101001111110000001111010010000101110";
        ram[18] = "0b0000000000000000000000000000000000000000000000000000000000000000";
        ram[19] = "0b1011111111000110001110100001101001111110000001111010010000101110";
        ram[20] = "0b1011111111010101111000111010100001110100100010000111110100001111";
        ram[21] = "0b1011111111100000000000000000000000000000000000000000000000000000";
        ram[22] = "0b1011111111100100100100011011011101010010001110110011000000001000";
        ram[23] = "0b1011111111101000100000110110111110100010110011100001010001010110";
        ram[24] = "0b1011111111101011101101100111101011101000010101111011000001111111";
        ram[25] = "0b1011111111101110000100011111011001000010010100010101110100111010";
        ram[26] = "0b1011111111101111100000111000101110001100100000001100111001100111";
        ram[27] = "0b1011111111110000000000000000000000000000000000000000000000000000";
        ram[28] = "0b1011111111101111100000111000101110001100100000001100111001100111";
        ram[29] = "0b1011111111101110000100011111011001000010010100010101110100111010";
        ram[30] = "0b1011111111101011101101100111101011101000010101111011000001111111";
        ram[31] = "0b1011111111101000100000110110111110100010110011100001010001010110";
        ram[32] = "0b1011111111100100100100011011011101010010001110110011000000001000";
        ram[33] = "0b1011111111100000000000000000000000000000000000000000000000000000";
        ram[34] = "0b1011111111010101111000111010100001110100100010000111110100001111";
        ram[35] = "0b1011111111000110001110100001101001111110000001111010010000101110";
        ram[36] = "0b0000000000000000000000000000000000000000000000000000000000000000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(draw_speedometer_bkb) {


static const unsigned DataWidth = 64;
static const unsigned AddressRange = 37;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


draw_speedometer_bkb_ram* meminst;


SC_CTOR(draw_speedometer_bkb) {
meminst = new draw_speedometer_bkb_ram("draw_speedometer_bkb_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~draw_speedometer_bkb() {
    delete meminst;
}


};//endmodule
#endif
