__soa_out = ""
__soa_out += """
# ==============================================================================
# This file is generated by VSI compiler
# ILANG version:"""
__soa_nodes[1].val = str(utils.ilang_version)
__soa_out += __soa_nodes[1].val
__soa_out += """
# Build Date:"""
__soa_nodes[3].val = str(utils.build_time)
__soa_out += __soa_nodes[3].val
__soa_out += """
# ==============================================================================
"""
vlnv = b.vlnv
__soa_out += """
open_project """
__soa_nodes[7].val = str(b.name)
__soa_out += __soa_nodes[7].val
if 'vsi_model_composer' == vlnv.library:
    enc_base_data = str([x.value for x in b.params if x.name == "BASE_DATA"][0])
    import base64, json; base_data = json.loads(base64.b64decode(enc_base_data).decode())
    __soa_out += """

# """
    __soa_nodes[15].val = str(base_data)
    __soa_out += __soa_nodes[15].val
    include_paths = base_data['include_paths']
    import os; dirs = [os.path.dirname(base_data['file'])]
    bind_effort = base_data['bind_effort']
    clock_period = base_data['clock_period']
    sched_effort = base_data['sched_effort']
else:
    dirs = []
    include_paths = []
    for inc in str(b.ENV_SOURCE_DIR).strip(',').split(','):
        dirs.append(utils.expand_env(inc))
    for inc in str(b.INCLUDE_DIR).strip(',').split(','):
        include_paths.append(utils.expand_env(inc))
    for inc in str(b.ctx.include_directories).strip(',').split(','):
        include_paths.append(utils.expand_env(inc))
    for inc in str(b.ctx.include_directories).strip(',').split(','):
        include_paths.append(utils.expand_env(inc))
    include_paths += dirs
    bind_effort = b.BIND_EFFORT
    clock_period = b.CLOCK_PERIOD
    sched_effort = b.SCHED_EFFORT
for d in dirs:
    __soa_out += """

set annotated_src_path ./annotated_src/[exec hashed_folder_path.sh """
    __soa_nodes[69].val = str(d)
    __soa_out += __soa_nodes[69].val
    __soa_out += """]
set files [glob -directory ${annotated_src_path} *.c*]
foreach file $files {
	add_files -cflags \"-std=c++11 \\"""
    for i in filter(None, include_paths):
        __soa_out += """
	-I """
        __soa_nodes[73].val = str(i)
        __soa_out += __soa_nodes[73].val
        __soa_out += """ \\"""
    __soa_out += """
	-I $::env(VSI_INSTALL)/target/common/include/vsi  \\
	"""
    __soa_nodes[77].val = str(b.ADDITION_C_FLAGS)
    __soa_out += __soa_nodes[77].val
    __soa_out += """-D__VSI_HLS_SYN__\" $file
}"""
func_name = vlnv.name if vlnv.library == "vsi_model_composer" else str(b.c_func_name).split()[0]
__soa_out += """

set_top """
__soa_nodes[83].val = str(func_name)
__soa_out += __soa_nodes[83].val
__soa_out += """
open_solution \"solution${::env(SOLUTION_NUM)}\"
set_directive_inline \""""
__soa_nodes[85].val = str(func_name)
__soa_out += __soa_nodes[85].val
__soa_out += """\""""
if vlnv.library == 'vsi_model_composer':
    __soa_out += """
"""
    for arg in base_data['args']:
        __soa_out += """
set_directive_interface"""
        if arg['protocol'] in ["AXI4-Lite"] and arg['direction'] != "input":
            __soa_out += """ -latency 110 -mode m_axi -depth """
            __soa_nodes[115].val = str(4096 if arg['length'] < 4096 else arg['length'])
            __soa_out += __soa_nodes[115].val
            __soa_out += """ -offset """
            __soa_nodes[117].val = str('slave' if 'no_dma' in arg else 'off')
            __soa_out += __soa_nodes[117].val
            __soa_out += """ """
            __soa_nodes[119].val = str(func_name)
            __soa_out += __soa_nodes[119].val
            __soa_out += """ """
            __soa_nodes[121].val = str(arg['name'])
            __soa_out += __soa_nodes[121].val
            if 'vsi_device' in arg:
                __soa_out += """.p"""
        elif arg['protocol'] == "Block RAM":
            __soa_out += """ -mode bram"""
            if 'fifo_size' in arg:
                __soa_out += """ -register"""
            if arg['type']['kind'] == "Pointer":
                __soa_out += """ -depth """
                __soa_nodes[133].val = str(arg['length'])
                __soa_out += __soa_nodes[133].val
            __soa_out += """ """
            __soa_nodes[136].val = str(func_name)
            __soa_out += __soa_nodes[136].val
            __soa_out += """ """
            __soa_nodes[138].val = str(arg['name'])
            __soa_out += __soa_nodes[138].val
            __soa_out += """
set_directive_resource -core RAM_1P_BRAM  """
            __soa_nodes[140].val = str(func_name)
            __soa_out += __soa_nodes[140].val
            __soa_out += """ \""""
            __soa_nodes[142].val = str(arg['name'])
            __soa_out += __soa_nodes[142].val
            __soa_out += """\""""
        elif arg['type']['kind'] == "Pointer" and "AXI4-Stream" not in arg['protocol']:
            __soa_out += """ -latency 110 -mode m_axi -offset off"""
            if 'fifo_size' in arg:
                __soa_out += """ -register"""
            __soa_nodes[149].val = str(func_name)
            __soa_out += __soa_nodes[149].val
            __soa_out += """ """
            __soa_nodes[151].val = str(arg['name'])
            __soa_out += __soa_nodes[151].val
        elif arg['type']['kind'] == ["Int"]:
            __soa_out += """ -mode s_axilite -bundle CONTROL_BUS -offset """
            __soa_nodes[155].val = str(arg['register_offset'])
            __soa_out += __soa_nodes[155].val
            __soa_out += """ -register """
            __soa_nodes[157].val = str(func_name)
            __soa_out += __soa_nodes[157].val
            __soa_out += """ """
            __soa_nodes[159].val = str(arg['name'])
            __soa_out += __soa_nodes[159].val
        else:
            __soa_out += """ -mode axis"""
            if 'fifo_size' in arg:
                __soa_out += """ -register"""
            if arg['length'] and arg['type']['kind'] == "Pointer":
                __soa_out += """ -depth """
                __soa_nodes[168].val = str(arg['length'])
                __soa_out += __soa_nodes[168].val
            __soa_out += """ """
            __soa_nodes[171].val = str(func_name)
            __soa_out += __soa_nodes[171].val
            __soa_out += """ """
            __soa_nodes[173].val = str(arg['name'])
            __soa_out += __soa_nodes[173].val
        if 'pack_data' in arg:
            __soa_out += """set_directive_data_pack """
            __soa_nodes[179].val = str(func_name)
            __soa_out += __soa_nodes[179].val
            __soa_out += """ """
            __soa_nodes[181].val = str(arg['name'])
            __soa_out += __soa_nodes[181].val
elif vlnv.library == "soft_ip":
    for arg in b.wizard_args:
        __soa_out += """
set_directive_interface"""
        if arg.param_access == "MEMORY" or  arg.param_access == "CONTROL" and arg.param_dir != "INPUT":
            __soa_out += """ -latency 110 -mode m_axi -depth """
            __soa_nodes[192].val = str(4096 if int(arg.param_size) < 4096 else arg.param_size)
            __soa_out += __soa_nodes[192].val
            __soa_out += """ -offset """
            __soa_nodes[194].val = str('slave' if arg.interface.no_dma else 'off')
            __soa_out += __soa_nodes[194].val
            __soa_out += """ """
            __soa_nodes[196].val = str(func_name)
            __soa_out += __soa_nodes[196].val
            __soa_out += """ """
            __soa_nodes[198].val = str(arg.param_name)
            __soa_out += __soa_nodes[198].val
            if arg.vsi_device:
                __soa_out += """.p"""
        elif arg.param_access == "RANDOM":
            __soa_out += """ -mode bram"""
            if arg.fifo_size == 1:
                __soa_out += """ -register"""
            if arg.param_type == "PTR":
                __soa_out += """ -depth """
                __soa_nodes[210].val = str(arg.param_size)
                __soa_out += __soa_nodes[210].val
            __soa_out += """ """
            __soa_nodes[213].val = str(func_name)
            __soa_out += __soa_nodes[213].val
            __soa_out += """ """
            __soa_nodes[215].val = str(arg.param_name)
            __soa_out += __soa_nodes[215].val
            __soa_out += """
set_directive_resource -core RAM_1P_BRAM  """
            __soa_nodes[217].val = str(func_name)
            __soa_out += __soa_nodes[217].val
            __soa_out += """ \""""
            __soa_nodes[219].val = str(arg.param_name)
            __soa_out += __soa_nodes[219].val
            __soa_out += """\""""
        elif arg.param_type == "PTR" and arg.param_access != "SEQ":
            __soa_out += """ -latency 110  -mode m_axi -offset off"""
            if arg.fifo_size == 1:
                __soa_out += """ -register"""
            __soa_out += """ """
            __soa_nodes[227].val = str(func_name)
            __soa_out += __soa_nodes[227].val
            __soa_out += """ """
            __soa_nodes[229].val = str(arg.param_name)
            __soa_out += __soa_nodes[229].val
        elif arg.param_type == "VALUE":
            __soa_out += """ -mode s_axilite -bundle CONTROL_BUS -offset """
            __soa_nodes[233].val = str(arg.register_offset)
            __soa_out += __soa_nodes[233].val
            __soa_out += """ -register """
            __soa_nodes[235].val = str(func_name)
            __soa_out += __soa_nodes[235].val
            __soa_out += """ """
            __soa_nodes[237].val = str(arg.param_name)
            __soa_out += __soa_nodes[237].val
        else:
            __soa_out += """ -mode axis"""
            if arg.fifo_size == 1:
                __soa_out += """ -register"""
            if arg.param_size != 0 and arg.param_type == "PTR":
                __soa_out += """ -depth """
                __soa_nodes[246].val = str(arg.param_size)
                __soa_out += __soa_nodes[246].val
            __soa_out += """ """
            __soa_nodes[249].val = str(func_name)
            __soa_out += __soa_nodes[249].val
            __soa_out += """ """
            __soa_nodes[251].val = str(arg.param_name)
            __soa_out += __soa_nodes[251].val
        __soa_out += """
"""
        if arg.pack_data:
            __soa_out += """
set_directive_data_pack """
            __soa_nodes[257].val = str(func_name)
            __soa_out += __soa_nodes[257].val
            __soa_out += """ """
            __soa_nodes[259].val = str(arg.param_name)
            __soa_out += __soa_nodes[259].val
        __soa_out += """
"""
    __soa_out += """
"""
__soa_out += """
for {set sn 1} {$sn <= $::env(SOLUTION_NUM)} {incr sn} {
	source \"directives_${sn}.tcl\"
}

#ensure M-AXI write are delayed until data is ready
config_rtl -enable_maxiConservative
set_part """
__soa_nodes[267].val = str(b.ctx.fpga_part)
__soa_out += __soa_nodes[267].val
__soa_out += """
config_rtl -reset all -reset_level low -reset_async
create_clock -period """
__soa_nodes[269].val = str(1000000000/int(clock_period))
__soa_out += __soa_nodes[269].val
__soa_out += """ -name default
config_bind -effort """
__soa_nodes[271].val = str(bind_effort)
__soa_out += __soa_nodes[271].val
__soa_out += """
config_schedule -effort """
__soa_nodes[273].val = str(sched_effort)
__soa_out += __soa_nodes[273].val
__soa_out += """
csynth_design
export_design -format ip_catalog -vendor \""""
__soa_nodes[275].val = str(vlnv.vendor)
__soa_out += __soa_nodes[275].val
__soa_out += """\" -version \"$::env(SOLUTION_NUM).0\"
exit
"""
if __soa_last_callback:__soa_last_callback(__soa_state(), {**globals(), **locals()})
