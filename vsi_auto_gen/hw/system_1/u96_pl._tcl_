# =============================================================================="
# File generated by Visual System Integrator
#
# =============================================================================="
# Save previews path
if {[info exists scriptDir]} {
	set  calledfromdir $scriptDir
}
set scriptDir [file dirname [info script]]
#-------------------------------------------------------------------------------
source ${scriptDir}/../../.platform/ultra96_platform/u96_pl.tcl
global tcl_platform
add_ip_repo_path ${scriptDir}/../../hls/system_1/u96_pl
update_ip_catalog -rebuild
if {![info exist ::env(VSI_INSTALL)]} {
  puts "Attention! VSI install not defined, some functionality as simulation can be broken"
} else {
  set axi_protocol_checker [get_ip_name axi_protocol_checker]
  set_property -name {xsim.elaborate.xelab.more_options} -value "-L $axi_protocol_checker -L smartconnect_v1_0 --sv_root ${::env(VSI_INSTALL)}/host/[string tolower [lindex $tcl_platform(os) 0]].x86_64/lib/rpc_simulator --sv_lib simulator_intf.so" -objects [get_filesets sim_1]
  set_property -name {questa.simulate.vsim.more_options} -value [list -dpicpppath /usr/bin/gcc -sv_root ${::env(VSI_INSTALL)}/host/[string tolower [lindex $tcl_platform(os) 0]].x86_64/lib/rpc_simulator -sv_lib simulator_intf_questa] -objects [get_filesets sim_1]
}
set system_delay_gen {}
proc vsi_get_pr_region_clocks {pr_set} {
	if {$pr_set == "1"} {
		return [list \
		        "CLOCKREGION_X1Y2:CLOCKREGION_X1Y2" \
		        ]
	}
		return ""
}
proc create_system_hier {system_name} {
# vsi_platform -> vsi_platform/u96_pl
push instance_place [current_bd_instance .]
set system_name [create_bd_cell -quiet -type hier ${system_name}]
current_bd_instance ${system_name}
create_bd_pin -dir I -type clk clk_0
create_bd_pin -dir I -type rst rst_2
create_bd_pin -dir I -type rst rst_0
create_bd_pin -dir I -type rst rst_1
create_bd_pin -dir I -type rst rst_3
create_bd_pin -dir I -type rst rst_4
create_bd_pin -dir I -type rst rst_8
create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 common_intf_CTRL
create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 common_intf_M_AXI_1
create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 common_intf_M_AXI_2
create_bd_pin -dir I decoup_en
create_bd_pin -dir O irq_i_1
create_bd_pin -dir O irq_i_2
create_bd_pin -dir O irq_i_3
create_bd_pin -dir O irq_i_4
create_bd_pin -dir O irq_i_5
create_bd_pin -dir O irq_i_6
create_bd_pin -dir O irq_i_7
create_bd_pin -dir O irq_i_8
create_bd_pin -dir I -type clk clk_5
create_bd_pin -dir I -type clk clk_6
create_bd_pin -dir I -type clk clk_7
# vsi_platform/u96_pl -> vsi_platform
current_bd_instance [popback instance_place]
return ${system_name}
}

proc region_intf_place_0 {target_hierarchy} {
push instance_place [current_bd_instance .]
current_bd_instance $target_hierarchy
current_bd_instance [popback instance_place]
}

proc sys_to_plat_connect_in {hier_target hier_dest} {
push instance_place [current_bd_instance .]
current_bd_instance /
set target_intf [get_bd_pins -quiet ${hier_target}/irq_i_1]
set dest_intf [get_bd_pins -quiet ${hier_dest}/irq_i_1]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/irq_i_2]
set dest_intf [get_bd_pins -quiet ${hier_dest}/irq_i_2]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/irq_i_3]
set dest_intf [get_bd_pins -quiet ${hier_dest}/irq_i_3]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/irq_i_4]
set dest_intf [get_bd_pins -quiet ${hier_dest}/irq_i_4]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/irq_i_5]
set dest_intf [get_bd_pins -quiet ${hier_dest}/irq_i_5]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/irq_i_6]
set dest_intf [get_bd_pins -quiet ${hier_dest}/irq_i_6]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/irq_i_7]
set dest_intf [get_bd_pins -quiet ${hier_dest}/irq_i_7]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/irq_i_8]
set dest_intf [get_bd_pins -quiet ${hier_dest}/irq_i_8]
safe_connect_bd_net ${target_intf} ${dest_intf}
intercon_control_clk_rst
intercon_intf_clk_propagate
current_bd_instance [popback instance_place]
}

proc sys_to_plat_connect_out {hier_target hier_dest} {
push instance_place [current_bd_instance .]
current_bd_instance /
set target_intf [get_bd_pins -quiet ${hier_target}/clk_0]
set dest_intf [get_bd_pins -quiet ${hier_dest}/clk_0]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/rst_2]
set dest_intf [get_bd_pins -quiet ${hier_dest}/rst_2]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/rst_0]
set dest_intf [get_bd_pins -quiet ${hier_dest}/rst_0]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/rst_1]
set dest_intf [get_bd_pins -quiet ${hier_dest}/rst_1]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/rst_3]
set dest_intf [get_bd_pins -quiet ${hier_dest}/rst_3]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/rst_4]
set dest_intf [get_bd_pins -quiet ${hier_dest}/rst_4]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/rst_8]
set dest_intf [get_bd_pins -quiet ${hier_dest}/rst_8]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_intf_pins -quiet ${hier_target}/common_intf_CTRL]
set dest_intf [get_bd_intf_pins -quiet ${hier_dest}/common_intf_CTRL]
connect_with_check ${target_intf} ${dest_intf}
sys_intf_termination ${hier_target} ${target_intf}
set target_intf [get_bd_intf_pins -quiet ${hier_target}/common_intf_M_AXI_1]
set dest_intf [get_bd_intf_pins -quiet ${hier_dest}/common_intf_M_AXI_1]
connect_with_check ${target_intf} ${dest_intf}
sys_intf_termination ${hier_target} ${target_intf}
set target_intf [get_bd_intf_pins -quiet ${hier_target}/common_intf_M_AXI_2]
set dest_intf [get_bd_intf_pins -quiet ${hier_dest}/common_intf_M_AXI_2]
connect_with_check ${target_intf} ${dest_intf}
sys_intf_termination ${hier_target} ${target_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/decoup_en]
set dest_intf [get_bd_pins -quiet ${hier_dest}/decoup_en]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/clk_5]
set dest_intf [get_bd_pins -quiet ${hier_dest}/clk_5]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/clk_6]
set dest_intf [get_bd_pins -quiet ${hier_dest}/clk_6]
safe_connect_bd_net ${target_intf} ${dest_intf}
set target_intf [get_bd_pins -quiet ${hier_target}/clk_7]
set dest_intf [get_bd_pins -quiet ${hier_dest}/clk_7]
safe_connect_bd_net ${target_intf} ${dest_intf}
intercon_control_clk_rst
intercon_intf_clk_propagate
current_bd_instance [popback instance_place]
}

proc sys_to_plat_connect_inout {hier_target hier_dest} {
push instance_place [current_bd_instance .]
current_bd_instance /
current_bd_instance [popback instance_place]
}

proc prsysvsi_system_u96_pl_pr_set_0_0 {system} {
# vsi_system/u96_pl -> vsi_system/u96_pl/pr_set_0_0
push instance_place [current_bd_instance .]
current_bd_instance ${system}
set placed_hier [create_system_hier partial_hier_0]
sys_to_plat_connect_out [get_bd_cells partial_hier_0] ${system}
#partial_hier_0
push instance_place [current_bd_instance .]
current_bd_instance ${placed_hier}
region_intf_place_0 ${placed_hier}
set c_cellpr_set_0_01 [create_bd_cell -quiet -type hier pr_set_0_0]
# vsi_system/u96_pl -> vsi_system/u96_pl/pr_set_0_0
push instance_place [current_bd_instance .]
current_bd_instance ${c_cellpr_set_0_01}
set c_cellmin_max2 [create_bd_cell -type ip -vlnv vsi.com:hls:min_max_shmem:1.0 min_max]
set ap_c [create_bd_cell -type ip -vlnv vsi.com:ip:vsi_hls_control ap_c_u96_pl_pr_set_0_0_min_max]
set_property -dict [list CONFIG.NUM_PARAMS {1} CONFIG.C_AP_START_NONE {0} CONFIG.C_AP_START_TIMER {0} CONFIG.P00_param_dir {1} CONFIG.P00_param_access {1}  ] $ap_c
vsi::connect_bd_net [get_bd_pin ${ap_c}/ap_clk] [get_bd_pin min_max/ap_clk]
vsi::connect_bd_net [get_bd_pin ${ap_c}/ap_resetn] [get_bd_pin min_max/ap_rst_n]
connect_bd_intf_net [get_bd_intf_pin ${ap_c}/ap_control] [get_bd_intf_pin min_max/ap_ctrl]
set this_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_0/min_max done]
set this_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_0/min_max io_frame]
set oc [create_bd_cell -type ip -vlnv vsi.com:ip:hls_interrupt u96_pl_pr_set_0_0_min_max_io_frame_oc ]
set_property CONFIG.param_access 3 $oc
connect_bd_intf_net [get_bd_intf_pin ${oc}/ap] [get_bd_intf_pin min_max/ap_ctrl]
vsi::connect_bd_net [get_bd_pin ${oc}/ap_clk] [get_bd_pin min_max/ap_clk]
vsi::connect_bd_net [get_bd_pin ${oc}/ap_rst_n] [get_bd_pin min_max/ap_rst_n]
set this_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_0/min_max start]
connect_bd_intf_net [get_bd_intf_pins ${ap_c}/S0_AXIS] $this_intf
set_property CONFIG.C_S0_AXI_DATA_WIDTH [expr 8 * [get_property CONFIG.TDATA_NUM_BYTES $this_intf]] [get_bd_cells ${ap_c}] 
# vsi_system/u96_pl/pr_set_0_0 -> vsi_system/u96_pl
current_bd_instance [popback instance_place]
current_bd_instance [popback instance_place]
current_bd_instance [popback instance_place]
#u96_pl/partial_hier_0/pr_set_0_0
push instance_place [current_bd_instance .]
current_bd_instance u96_pl/partial_hier_0/pr_set_0_0
if {[catch {
set pr_interface [get_bd_intf_pins -quiet /u96_pl/partial_hier_0/io_frame_pr_preset_0]
set in_pr_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_0/min_max io_frame]
connect_in_hier ${in_pr_intf} ${pr_interface} -quiet} error_msg ]} { 
puts "Error in connection:" 
 puts "$error_msg"}
vsi::connect_bd_net -quiet   [get_bd_pins /p_u96_pl/zynq_ultra_ps_e_0/zynq_ultra_ps_e_0] [get_bd_pins /p_u96_pl/vsi_common_interface_0/DMA_ACLK]
set dest_intf [get_hls_intf /p_u96_pl/vsi_common_interface_0 S_AXI_0]
set src_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_0/min_max io_frame]
apply_connection $src_intf [get_bd_intf_pins $dest_intf] ${system}
set ctrl_slave_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_0/min_max s_axi_AXILiteS]
set ctrl_master_intf [get_hls_intf /p_u96_pl/vsi_common_interface_0 CTRL]
apply_connection $ctrl_master_intf [get_bd_intf_pins $ctrl_slave_intf] ${system}
# sometimes the address range might be "excluded"
set ex_ar [get_bd_addr_seg -excluded -of $src_intf]
if {$ex_ar != ""} { include_bd_addr_seg -quiet $ex_ar }
set slave_intf [get_bd_intf_pins /p_u96_pl/vsi_common_interface_0/S_AXI_0]
assign_bd_address -quiet -offset 0x0 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet $slave_intf] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet $slave_intf] ] ]
set_property offset 0x0 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet $slave_intf] ] ]
set_property range 0x100000000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet $slave_intf] ] ]
vsi::connect_bd_net [get_bd_pins u96_pl_pr_set_0_0_min_max_io_frame_oc/interrupt] [get_bd_pins /p_u96_pl/vsi_common_interface_0/irq_i_1]
set_property offset 0x88000000 [get_bd_addr_seg -of [get_bd_addr_seg -of [get_bd_intf_pins $ctrl_slave_intf]]]
current_bd_instance [popback instance_place]
#u96_pl/partial_hier_0/pr_set_0_0
push instance_place [current_bd_instance .]
current_bd_instance u96_pl/partial_hier_0/pr_set_0_0
#current_bd_instance [get_bd_cells /u96_pl/pr_set_0_0]
set s2mm [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_fifo_mm_s s2mm_u96_pl_pr_set_0_0_min_maxdone ]
set_property -dict [list CONFIG.C_USE_TX_DATA {0} CONFIG.C_USE_TX_CTRL {0} CONFIG.C_DATA_INTERFACE_TYPE {1} CONFIG.C_HAS_AXIS_TKEEP {true} CONFIG.C_USE_RX_CUT_THROUGH {false} CONFIG.C_S_AXI4_DATA_WIDTH {64} CONFIG.C_AXIS_TUSER_WIDTH  {8} CONFIG.C_RX_FIFO_DEPTH {512} CONFIG.C_RX_FIFO_PF_THRESHOLD {256} 	 CONFIG.C_S_AXI_ADDR_WIDTH {8}	] $s2mm
set slave [get_bd_intf_pin ${s2mm}/S_AXI_FULL]
set c_slave [get_bd_intf_pin ${s2mm}/S_AXI]
apply_connection /p_u96_pl/vsi_common_interface_0/M_AXI_1 $slave ${system}
apply_connection /p_u96_pl/vsi_common_interface_0/CTRL $c_slave ${system}
vsi_add_regslice $c_slave
set c_clk [get_bd_pins /p_u96_pl/zynq_ultra_ps_e_0/pl_clk0 ]
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aclk] $c_clk
set src_axis [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_0/min_max done]
set swc [create_bd_cell -type ip -vlnv xilinx.com:ip:axis_interconnect dwc_u96_pl_pr_set_0_0_min_max_done] 
set_property -dict [list CONFIG.NUM_MI {1} ] ${swc} 
# generate fifo mode if destination has tlast
set d_tlast [get_property CONFIG.HAS_TLAST $src_axis]
if {$d_tlast == "1"} { set_property -dict [list CONFIG.M00_FIFO_MODE {1} CONFIG.S00_FIFO_MODE {1} ] ${swc} }
# update tuser bit width
set d_tuserw [get_property CONFIG.TUSER_WIDTH $src_axis]
set d_tdataw [get_property CONFIG.C_AXIS_TUSER_WIDTH $src_axis]
if {$d_tuserw != "" && $d_tuserw != "0"} { 
set_property -dict [list CONFIG.C_HAS_AXIS_TUSER {true}] ${s2mm}} 
connect_bd_intf_net [get_bd_intf_pin ${s2mm}/AXI_STR_RXD] [get_bd_intf_pin ${swc}/M00_AXIS]
connect_bd_intf_net  [get_bd_intf_pin ${swc}/S00_AXIS] $src_axis
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aclk] [get_bd_pins /u96_pl/pr_set_0_0/min_max/ap_clk]
vsi::connect_bd_net -quiet [get_bd_pins ${swc}/S00_AXIS_ACLK] [get_bd_pins /u96_pl/pr_set_0_0/min_max/ap_clk]
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aresetn] [get_bd_pins /u96_pl/pr_set_0_0/min_max/ap_rst_n]
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aclk] [get_bd_pins ${swc}/ACLK] [get_bd_pins ${swc}/M00_AXIS_ACLK] 
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aresetn] [get_bd_pins ${swc}/ARESETN] [get_bd_pins ${swc}/S00_AXIS_ARESETN] [get_bd_pins ${swc}/M00_AXIS_ARESETN] 
vsi::connect_bd_net [get_bd_pins ${s2mm}/interrupt] [get_bd_pins /p_u96_pl/vsi_common_interface_0/irq_i_3]
assign_bd_address -quiet -offset 0x200000000 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI_FULL] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI_FULL] ] ]
set_property offset 0x200000000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI_FULL] ] ]
set_property range 0x10000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI_FULL] ] ]
set_property -dict [list CONFIG.C_AXI4_BASEADDR {0x0} CONFIG.C_AXI4_HIGHADDR {0xffff} ] ${s2mm}
assign_bd_address -quiet -offset 0x88020000 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI] ] ]
set_property offset 0x88020000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI] ] ]
set_property range 0x10000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI] ] ]
set_property -dict [list CONFIG.C_BASEADDR {0x88020000} CONFIG.C_HIGHADDR {0x8802ffff} ] ${s2mm}
current_bd_instance [popback instance_place]
#u96_pl/partial_hier_0/pr_set_0_0
push instance_place [current_bd_instance .]
current_bd_instance u96_pl/partial_hier_0/pr_set_0_0
set mm2s [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_fifo_mm_s mm2s_u96_pl_pr_set_0_0_min_maxstart ]
set_property -dict [list CONFIG.C_USE_RX_DATA {0} CONFIG.C_USE_TX_CTRL {0} CONFIG.C_DATA_INTERFACE_TYPE {1} CONFIG.C_HAS_AXIS_TKEEP {true} CONFIG.C_S_AXI_ADDR_WIDTH {8} CONFIG.C_S_AXI4_DATA_WIDTH {64} CONFIG.C_AXIS_TUSER_WIDTH  {8} CONFIG.C_TX_FIFO_DEPTH {512} ] $mm2s
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aclk] [get_bd_pins /p_u96_pl/zynq_ultra_ps_e_0/pl_clk0]
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aresetn] [get_bd_pins /p_u96_pl/proc_sys_reset_0/peripheral_aresetn]
set slave [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL]
set c_slave [get_bd_intf_pins -quiet ${mm2s}/S_AXI]
set dest_axis [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_0/min_max start]
apply_connection /p_u96_pl/vsi_common_interface_0/M_AXI_2 $slave ${system}
apply_connection /p_u96_pl/vsi_common_interface_0/CTRL $c_slave ${system}
vsi_add_regslice $c_slave
set swc [create_bd_cell -type ip -vlnv xilinx.com:ip:axis_interconnect dwc_u96_pl_pr_set_0_0_min_max_start] 
set swc_mdw [get_property CONFIG.TDATA_NUM_BYTES $dest_axis ]
set_property CONFIG.NUM_MI 1 ${swc} 
connect_bd_intf_net [get_bd_intf_pin ${mm2s}/AXI_STR_TXD] [get_bd_intf_pin ${swc}/S00_AXIS]
connect_bd_intf_net [get_bd_intf_pin ${swc}/M00_AXIS] $dest_axis
set c_clk [get_bd_pins /p_u96_pl/zynq_ultra_ps_e_0/pl_clk0 ]
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aclk] $c_clk
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aclk] [get_bd_pins ${swc}/ACLK] 
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aclk] [get_bd_pins ${swc}/S00_AXIS_ACLK]
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aresetn] [get_bd_pins ${swc}/ARESETN] [get_bd_pins ${swc}/S00_AXIS_ARESETN] [get_bd_pins ${swc}/M00_AXIS_ARESETN] 
vsi::connect_bd_net -quiet [get_bd_pins min_max/ap_clk] [get_bd_pins ${swc}/M00_AXIS_ACLK] 
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aresetn] [get_bd_pins min_max/ap_rst_n]
# if destination does not have TLAST then set cut-through mode
set d_tlast [get_property CONFIG.HAS_TLAST $dest_axis]
if {$d_tlast != "1"} { set_property -dict [list CONFIG.C_USE_TX_CUT_THROUGH {1}] $mm2s } 
assign_bd_address -quiet -offset 0x300000000 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL] ] ]
set_property offset 0x300000000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL] ] ]
set_property range 0x10000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL] ] ]
set_property -dict [list CONFIG.C_AXI4_BASEADDR {0x0} CONFIG.C_AXI4_HIGHADDR {0xffff} ] ${mm2s}
assign_bd_address -quiet -offset 0x88030000 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI] ] ]
set_property offset 0x88030000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI] ] ]
set_property range 0x10000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI] ] ]
set_property -dict [list CONFIG.C_BASEADDR {0x88030000} CONFIG.C_HIGHADDR {0x8803ffff} ] ${mm2s}
current_bd_instance [popback instance_place]
return ${placed_hier}
}
# prsysvsi_system_u96_pl_pr_set_0_0

proc prsysvsi_system_u96_pl_pr_set_0_1 {system} {
# vsi_system/u96_pl -> vsi_system/u96_pl/pr_set_0_1
push instance_place [current_bd_instance .]
current_bd_instance ${system}
set placed_hier [create_system_hier partial_hier_0]
sys_to_plat_connect_out [get_bd_cells partial_hier_0] ${system}
#partial_hier_0
push instance_place [current_bd_instance .]
current_bd_instance ${placed_hier}
region_intf_place_0 ${placed_hier}
set c_cellpr_set_0_11 [create_bd_cell -quiet -type hier pr_set_0_1]
# vsi_system/u96_pl -> vsi_system/u96_pl/pr_set_0_1
push instance_place [current_bd_instance .]
current_bd_instance ${c_cellpr_set_0_11}
set c_cellspeedometer2 [create_bd_cell -type ip -vlnv vsi.com:hls:draw_speedometer:1.0 speedometer]
set ap_c [create_bd_cell -type ip -vlnv vsi.com:ip:vsi_hls_control ap_c_u96_pl_pr_set_0_1_speedometer]
set_property -dict [list CONFIG.NUM_PARAMS {1} CONFIG.C_AP_START_NONE {0} CONFIG.C_AP_START_TIMER {0} CONFIG.P00_param_dir {1} CONFIG.P00_param_access {1}  ] $ap_c
vsi::connect_bd_net [get_bd_pin ${ap_c}/ap_clk] [get_bd_pin speedometer/ap_clk]
vsi::connect_bd_net [get_bd_pin ${ap_c}/ap_resetn] [get_bd_pin speedometer/ap_rst_n]
connect_bd_intf_net [get_bd_intf_pin ${ap_c}/ap_control] [get_bd_intf_pin speedometer/ap_ctrl]
set this_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_1/speedometer done]
set this_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_1/speedometer io_frame]
set oc [create_bd_cell -type ip -vlnv vsi.com:ip:hls_interrupt u96_pl_pr_set_0_1_speedometer_io_frame_oc ]
set_property CONFIG.param_access 3 $oc
connect_bd_intf_net [get_bd_intf_pin ${oc}/ap] [get_bd_intf_pin speedometer/ap_ctrl]
vsi::connect_bd_net [get_bd_pin ${oc}/ap_clk] [get_bd_pin speedometer/ap_clk]
vsi::connect_bd_net [get_bd_pin ${oc}/ap_rst_n] [get_bd_pin speedometer/ap_rst_n]
set this_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_1/speedometer start]
connect_bd_intf_net [get_bd_intf_pins ${ap_c}/S0_AXIS] $this_intf
set_property CONFIG.C_S0_AXI_DATA_WIDTH [expr 8 * [get_property CONFIG.TDATA_NUM_BYTES $this_intf]] [get_bd_cells ${ap_c}] 
# vsi_system/u96_pl/pr_set_0_1 -> vsi_system/u96_pl
current_bd_instance [popback instance_place]
current_bd_instance [popback instance_place]
current_bd_instance [popback instance_place]
# vsi_system/u96_pl -> vsi_system
current_bd_instance [popback instance_place]
#u96_pl/partial_hier_0/pr_set_0_1
push instance_place [current_bd_instance .]
current_bd_instance u96_pl/partial_hier_0/pr_set_0_1
if {[catch {
set pr_interface [get_bd_intf_pins -quiet /u96_pl/partial_hier_0/io_frame_pr_preset]
set in_pr_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_1/speedometer io_frame]
connect_in_hier ${in_pr_intf} ${pr_interface} -quiet} error_msg ]} { 
puts "Error in connection:" 
 puts "$error_msg"}
vsi::connect_bd_net -quiet   [get_bd_pins /p_u96_pl/zynq_ultra_ps_e_0/zynq_ultra_ps_e_0] [get_bd_pins /p_u96_pl/vsi_common_interface_0/DMA_ACLK]
set dest_intf [get_hls_intf /p_u96_pl/vsi_common_interface_0 S_AXI_0]
set src_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_1/speedometer io_frame]
apply_connection $src_intf [get_bd_intf_pins $dest_intf] ${system}
set ctrl_slave_intf [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_1/speedometer s_axi_AXILiteS]
set ctrl_master_intf [get_hls_intf /p_u96_pl/vsi_common_interface_0 CTRL]
apply_connection $ctrl_master_intf [get_bd_intf_pins $ctrl_slave_intf] ${system}
# sometimes the address range might be "excluded"
set ex_ar [get_bd_addr_seg -excluded -of $src_intf]
if {$ex_ar != ""} { include_bd_addr_seg -quiet $ex_ar }
set slave_intf [get_bd_intf_pins /p_u96_pl/vsi_common_interface_0/S_AXI_0]
assign_bd_address -quiet -offset 0x0 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet $slave_intf] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet $slave_intf] ] ]
set_property offset 0x0 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet $slave_intf] ] ]
set_property range 0x100000000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet $slave_intf] ] ]
vsi::connect_bd_net [get_bd_pins u96_pl_pr_set_0_1_speedometer_io_frame_oc/interrupt] [get_bd_pins /p_u96_pl/vsi_common_interface_0/irq_i_2]
set_property offset 0x88010000 [get_bd_addr_seg -of [get_bd_addr_seg -of [get_bd_intf_pins $ctrl_slave_intf]]]
current_bd_instance [popback instance_place]
#u96_pl/partial_hier_0/pr_set_0_1
push instance_place [current_bd_instance .]
current_bd_instance u96_pl/partial_hier_0/pr_set_0_1
#current_bd_instance [get_bd_cells /u96_pl/pr_set_0_1]
set s2mm [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_fifo_mm_s s2mm_u96_pl_pr_set_0_1_speedometerdone ]
set_property -dict [list CONFIG.C_USE_TX_DATA {0} CONFIG.C_USE_TX_CTRL {0} CONFIG.C_DATA_INTERFACE_TYPE {1} CONFIG.C_HAS_AXIS_TKEEP {true} CONFIG.C_USE_RX_CUT_THROUGH {false} CONFIG.C_S_AXI4_DATA_WIDTH {64} CONFIG.C_AXIS_TUSER_WIDTH  {8} CONFIG.C_RX_FIFO_DEPTH {512} CONFIG.C_RX_FIFO_PF_THRESHOLD {256} 	 CONFIG.C_S_AXI_ADDR_WIDTH {8}	] $s2mm
set slave [get_bd_intf_pin ${s2mm}/S_AXI_FULL]
set c_slave [get_bd_intf_pin ${s2mm}/S_AXI]
apply_connection /p_u96_pl/vsi_common_interface_0/M_AXI_1 $slave ${system}
apply_connection /p_u96_pl/vsi_common_interface_0/CTRL $c_slave ${system}
vsi_add_regslice $c_slave
set c_clk [get_bd_pins /p_u96_pl/zynq_ultra_ps_e_0/pl_clk0 ]
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aclk] $c_clk
set src_axis [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_1/speedometer done]
set swc [create_bd_cell -type ip -vlnv xilinx.com:ip:axis_interconnect dwc_u96_pl_pr_set_0_1_speedometer_done] 
set_property -dict [list CONFIG.NUM_MI {1} ] ${swc} 
# generate fifo mode if destination has tlast
set d_tlast [get_property CONFIG.HAS_TLAST $src_axis]
if {$d_tlast == "1"} { set_property -dict [list CONFIG.M00_FIFO_MODE {1} CONFIG.S00_FIFO_MODE {1} ] ${swc} }
# update tuser bit width
set d_tuserw [get_property CONFIG.TUSER_WIDTH $src_axis]
set d_tdataw [get_property CONFIG.C_AXIS_TUSER_WIDTH $src_axis]
if {$d_tuserw != "" && $d_tuserw != "0"} { 
set_property -dict [list CONFIG.C_HAS_AXIS_TUSER {true}] ${s2mm}} 
connect_bd_intf_net [get_bd_intf_pin ${s2mm}/AXI_STR_RXD] [get_bd_intf_pin ${swc}/M00_AXIS]
connect_bd_intf_net  [get_bd_intf_pin ${swc}/S00_AXIS] $src_axis
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aclk] [get_bd_pins /u96_pl/pr_set_0_1/speedometer/ap_clk]
vsi::connect_bd_net -quiet [get_bd_pins ${swc}/S00_AXIS_ACLK] [get_bd_pins /u96_pl/pr_set_0_1/speedometer/ap_clk]
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aresetn] [get_bd_pins /u96_pl/pr_set_0_1/speedometer/ap_rst_n]
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aclk] [get_bd_pins ${swc}/ACLK] [get_bd_pins ${swc}/M00_AXIS_ACLK] 
vsi::connect_bd_net -quiet [get_bd_pins ${s2mm}/s_axi_aresetn] [get_bd_pins ${swc}/ARESETN] [get_bd_pins ${swc}/S00_AXIS_ARESETN] [get_bd_pins ${swc}/M00_AXIS_ARESETN] 
vsi::connect_bd_net [get_bd_pins ${s2mm}/interrupt] [get_bd_pins /p_u96_pl/vsi_common_interface_0/irq_i_4]
assign_bd_address -quiet -offset 0x200010000 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI_FULL] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI_FULL] ] ]
set_property offset 0x200010000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI_FULL] ] ]
set_property range 0x10000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI_FULL] ] ]
set_property -dict [list CONFIG.C_AXI4_BASEADDR {0x10000} CONFIG.C_AXI4_HIGHADDR {0x1ffff} ] ${s2mm}
assign_bd_address -quiet -offset 0x88040000 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI] ] ]
set_property offset 0x88040000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI] ] ]
set_property range 0x10000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${s2mm}/S_AXI] ] ]
set_property -dict [list CONFIG.C_BASEADDR {0x88040000} CONFIG.C_HIGHADDR {0x8804ffff} ] ${s2mm}
current_bd_instance [popback instance_place]
#u96_pl/partial_hier_0/pr_set_0_1
push instance_place [current_bd_instance .]
current_bd_instance u96_pl/partial_hier_0/pr_set_0_1
set mm2s [create_bd_cell -type ip -vlnv xilinx.com:ip:axi_fifo_mm_s mm2s_u96_pl_pr_set_0_1_speedometerstart ]
set_property -dict [list CONFIG.C_USE_RX_DATA {0} CONFIG.C_USE_TX_CTRL {0} CONFIG.C_DATA_INTERFACE_TYPE {1} CONFIG.C_HAS_AXIS_TKEEP {true} CONFIG.C_S_AXI_ADDR_WIDTH {8} CONFIG.C_S_AXI4_DATA_WIDTH {64} CONFIG.C_AXIS_TUSER_WIDTH  {8} CONFIG.C_TX_FIFO_DEPTH {512} ] $mm2s
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aclk] [get_bd_pins /p_u96_pl/zynq_ultra_ps_e_0/pl_clk0]
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aresetn] [get_bd_pins /p_u96_pl/proc_sys_reset_0/peripheral_aresetn]
set slave [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL]
set c_slave [get_bd_intf_pins -quiet ${mm2s}/S_AXI]
set dest_axis [get_hls_intf /u96_pl/partial_hier_0/pr_set_0_1/speedometer start]
apply_connection /p_u96_pl/vsi_common_interface_0/M_AXI_2 $slave ${system}
apply_connection /p_u96_pl/vsi_common_interface_0/CTRL $c_slave ${system}
vsi_add_regslice $c_slave
set swc [create_bd_cell -type ip -vlnv xilinx.com:ip:axis_interconnect dwc_u96_pl_pr_set_0_1_speedometer_start] 
set swc_mdw [get_property CONFIG.TDATA_NUM_BYTES $dest_axis ]
set_property CONFIG.NUM_MI 1 ${swc} 
connect_bd_intf_net [get_bd_intf_pin ${mm2s}/AXI_STR_TXD] [get_bd_intf_pin ${swc}/S00_AXIS]
connect_bd_intf_net [get_bd_intf_pin ${swc}/M00_AXIS] $dest_axis
set c_clk [get_bd_pins /p_u96_pl/zynq_ultra_ps_e_0/pl_clk0 ]
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aclk] $c_clk
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aclk] [get_bd_pins ${swc}/ACLK] 
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aclk] [get_bd_pins ${swc}/S00_AXIS_ACLK]
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aresetn] [get_bd_pins ${swc}/ARESETN] [get_bd_pins ${swc}/S00_AXIS_ARESETN] [get_bd_pins ${swc}/M00_AXIS_ARESETN] 
vsi::connect_bd_net -quiet [get_bd_pins speedometer/ap_clk] [get_bd_pins ${swc}/M00_AXIS_ACLK] 
vsi::connect_bd_net -quiet [get_bd_pins ${mm2s}/s_axi_aresetn] [get_bd_pins speedometer/ap_rst_n]
# if destination does not have TLAST then set cut-through mode
set d_tlast [get_property CONFIG.HAS_TLAST $dest_axis]
if {$d_tlast != "1"} { set_property -dict [list CONFIG.C_USE_TX_CUT_THROUGH {1}] $mm2s } 
assign_bd_address -quiet -offset 0x300010000 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL] ] ]
set_property offset 0x300010000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL] ] ]
set_property range 0x10000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI_FULL] ] ]
set_property -dict [list CONFIG.C_AXI4_BASEADDR {0x10000} CONFIG.C_AXI4_HIGHADDR {0x1ffff} ] ${mm2s}
assign_bd_address -quiet -offset 0x88050000 -range 0x1000 [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI] ]
set_property range 0x1000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI] ] ]
set_property offset 0x88050000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI] ] ]
set_property range 0x10000 [get_bd_addr_seg -of_objects [get_bd_addr_seg -of_objects [get_bd_intf_pins -quiet ${mm2s}/S_AXI] ] ]
set_property -dict [list CONFIG.C_BASEADDR {0x88050000} CONFIG.C_HIGHADDR {0x8805ffff} ] ${mm2s}
current_bd_instance [popback instance_place]
return ${placed_hier}
}
# prsysvsi_system_u96_pl_pr_set_0_1

proc system_instu96_pl {} {
set system [create_system_hier u96_pl]
sys_to_plat_connect_out [get_bd_cells u96_pl] [get_bd_cells p_u96_pl]
sys_to_plat_connect_inout [get_bd_cells u96_pl] [get_bd_cells p_u96_pl]
sys_to_plat_connect_in [get_bd_cells u96_pl] [get_bd_cells p_u96_pl]
#u96_pl
push instance_place [current_bd_instance .]
current_bd_instance ${system}
current_bd_instance [popback instance_place]
return ${system}
}
# system_instu96_pl

set system [system_instu96_pl]
set partial_hier_0 [prsysvsi_system_u96_pl_pr_set_0_0 ${system}]
post_interface_clk_rst_connect
intercon_control_clk_rst
push reconnection_list [get_connection_list ${partial_hier_0}]
set pr_definition_0 [hier_to_pr ${partial_hier_0} partial_hier_0 vsi_system_u96_pl_pr_set_0_0]
delete_bd_objs -quiet ${partial_hier_0}
set partial_hier_0 [prsysvsi_system_u96_pl_pr_set_0_1 ${system}]
post_interface_clk_rst_connect
intercon_control_clk_rst
push reconnection_list [get_connection_list ${partial_hier_0}]
set pr_definition_0 [hier_to_pr ${partial_hier_0} partial_hier_0 vsi_system_u96_pl_pr_set_0_1]
reconnection_by_lists ${reconnection_list}
pr_replace ${partial_hier_0} ${pr_definition_0}
set partial_hier_0 [decoupler_cover ${partial_hier_0} 0]
make_xdc_constarin
post_processing ${system}
foreach pdg $platform_delay_gen {eval $pdg}
assign_bd_address
foreach sdg $system_delay_gen {eval $sdg}
save_bd_design
set_property synth_checkpoint_mode Hierarchical [get_files [get_property	 FILE_NAME [current_bd_design]]]
set wrap_file [make_wrapper -files [get_files [get_files [current_bd_design].bd]] -top]
add_file -norecurse $wrap_file
update_compile_order -fileset sources_1
set obj [get_runs synth_1]
set_property -name {STEPS.ROUTE_DESIGN.ARGS.MORE OPTIONS} -value -ultrathreads -objects [get_runs impl_1]
set_property STEPS.WRITE_BITSTREAM.ARGS.BIN_FILE true [get_runs impl_1]
generate_target all [get_files [get_property file_name [current_bd_design]]]
pr_config_wizard [current_bd_design]
propagate_intf_settings_to_module
#-------------------------------------------------------------------------------
# Re set previews path
if {[info exists calledfromdir]} {
	set  scriptDir $calledfromdir
} else {
	unset scriptDir
}
# END
